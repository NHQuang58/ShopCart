components:
  schemas:
    User:
      type: object
      properties:
        userID:
          type: integer
        userName:
          type: string
          format: email
        passWord:
          type: string
        score:
          type: integer
        role:
          type: string
          enum: [user, admin]
        isEmailVerified:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        userID: 1
        userName: qn052289@gmail.com
        passWord: $2a$08$WdNpageqK1i2xyimxUtuW.PQ3K/wqssE/m01/esRqe0AbX1gWbSEW
        score: 1
        role: admin
        isEmailVerified: true
        createdAt: 2022-01-01T07:36:00.763Z
        updatedAt: 2022-01-05T12:59:35.579Z

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Username already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Username already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found
    UserNotFound:
      description: userID not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: userID not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
